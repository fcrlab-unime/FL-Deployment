version: '3.8'

services:
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - 9090:9090
    deploy:
      restart_policy:
        condition: on-failure
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    depends_on:
      - cadvisor
    networks:
      - monitor-net

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: cadvisor
    privileged: true
    deploy:
      restart_policy:
        condition: on-failure
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - monitor-net

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - 3000:3000
    deploy:
      restart_policy:
        condition: on-failure
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./config/grafana.ini:/etc/grafana/grafana.ini
      - ./config/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./config/provisioning/dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      - prometheus
      - cadvisor
    command:
      - --config=/etc/grafana/grafana.ini
  client:
    # Build the Docker image using 'Dockerfile.supernode' in the current directory
    build:
      context: .
      dockerfile: Dockerfile
    # Name the container for easier reference
    container_name: client${CLIENT_N}
    labels:
      - "io.cadvisor.scrape=true"
      - "io.cadvisor.container=true"
    network_mode: "host"  # Use host networking to bind to all interfaces
    command: []
    ports:
      - "9092:9092"
      - "9094:9094"  # For the SuperNode's gRPC server
      - "6001:6001"  # For the Flask server
    volumes:
      # Mount a local directory for the dataset into the container's /data directory
      # IMPORTANT: Replace './path/to/your/dataset' with the actual path on your host machine.
      - ./dataset:/data
      # Mount a local directory for the model into the container's /model directory
      # IMPORTANT: Replace './path/to/your/model' with the actual path on your host machine.
      - /var/run/docker.sock:/var/run/docker.sock
      - ./model:/model
    environment:
      # Configure the SuperNode using environment variables read by entrypoint.sh
      - SUPERLINK_IP=172.17.4.207 # Binds to all network interfaces, making it accessible
      - SUPERLINK_PORT=9092
      - DATASET_PATH=/data/fashionmnist_part_${CLIENT_N}
      - FLASK_RUN_PORT=6001
      - container_name=client${CLIENT_N}
      - DOCKER_HOST_IP=host.docker.internal
    stop_signal: SIGINT
    depends_on:
      - prometheus
      - cadvisor
      - grafana
    networks:
      - monitor-net
  # client2:
  #   # Build the Docker image using 'Dockerfile.supernode' in the current directory
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   # Name the container for easier reference
  #   container_name: client2
  #   labels:
  #     - "io.cadvisor.scrape=true"
  #     - "io.cadvisor.container=true"
  #   # network_mode: "host"  # Use host networking to bind to all interfaces
  #   # The command is handled by the entrypoint.sh script, but you could add
  #   # additional arguments here if needed.
  #   command: []
  #   ports:

  #     # Map host port 9092 to container port 9092 (for the SuperLink)
  #     - "9096:9092"
  #     - "9097:9094"  # For the SuperNode's gRPC server
  #     - "6002:6002"  # For the Flask server
  #   volumes:
  #     # Mount a local directory for the dataset into the container's /data directory
  #     # IMPORTANT: Replace './path/to/your/dataset' with the actual path on your host machine.
  #     - ./dataset:/data
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     # Mount a local directory for the model into the container's /model directory
  #     # IMPORTANT: Replace './path/to/your/model' with the actual path on your host machine.
  #     - ./model:/model
  #   environment:
  #     # Configure the SuperNode using environment variables read by entrypoint.sh
  #     - SUPERLINK_IP=host.docker.internal # Binds to all network interfaces, making it accessible
  #     - SUPERLINK_PORT=9092
  #     - DATASET_PATH=/data/fashionmnist_part_1
  #     - FLASK_RUN_PORT=6002
  #     - container_name=client2
  #     - DOCKER_HOST_IP=host.docker.internal
  #   stop_signal: SIGINT
  #   depends_on:
  #     - prometheus
  #     - cadvisor
  #     - grafana
  #   networks:
  #     - monitor-net


volumes:
  grafana-storage:

networks:
  monitor-net:
    driver: bridge